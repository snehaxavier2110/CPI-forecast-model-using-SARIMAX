# -*- coding: utf-8 -*-
"""ai model for cpi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zVcH7Mv9rf-dQfSC1gKaE6miUzXW64bU
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import plotly.express as px
import pandas as pd
df=pd.read_csv("/content/cpi data.xlsx - Sheet1.csv")
df=df.drop(df[df["Sector"]== "Rural+Urban"].index)
df=df.drop(df[df["Sector"]== "Rural"].index)
df=df.dropna()
df['Date']=pd.to_datetime('01-'+df['Month'].astype(str)+'-'+df['Year'].astype(str))
df.set_index('Date',inplace=True)

option=[ 'Cereals and products', 'Meat and fish',
       'Egg', 'Milk and products', 'Oils and fats', 'Fruits', 'Vegetables',
       'Pulses and products', 'Sugar and Confectionery', 'Spices',
       'Non-alcoholic beverages', 'Prepared meals, snacks, sweets etc.',
       'Food and beverages', 'Pan, tobacco and intoxicants', 'Clothing',
       'Footwear', 'Clothing and footwear', 'Housing', 'Fuel and light',
       'Household goods and services', 'Health', 'Transport and communication',
       'Recreation and amusement', 'Education', 'Personal care and effects',
       'Miscellaneous', 'General index']
def select_and_display_column(df):
    print("Select a column from the following options:")
    for col in option:
        print(col)
    global selected_column
    selected_column = input("Enter the name of the column you want to display: ")

    if selected_column in option:
        selected_df = df[[selected_column]]
        return selected_df
    else:
        print("Invalid column name. Please select from the provided options.")

new_df = select_and_display_column(df)

# Calculate first differences
if 'firstdiff' not in new_df.columns:
    new_df['firstdiff'] = new_df[selected_column] - new_df[selected_column].shift(1)

# Calculate seasonal first differences (assuming monthly data)
if 'seasonalfirstdiff' not in new_df.columns:
    new_df['seasonalfirstdiff'] = new_df[selected_column] - new_df[selected_column].shift(12)
#model fit
import statsmodels.api as sm
split_date = '2020-12-01'
model=sm.tsa.statespace.SARIMAX(new_df[selected_column].loc[:split_date],order=(1,1,3),seasonal_order=(1,1,3,12))
results=model.fit()
a=results.predict(start=83,end=92)
new_df['forecast']=a

#error detection
from sklearn.metrics import mean_absolute_error, mean_squared_error,mean_absolute_percentage_error
import numpy as np
mse = mean_squared_error(new_df[selected_column].iloc[83:92], new_df['forecast'].iloc[83:92])
mae = mean_absolute_error(new_df[selected_column].iloc[83:92],new_df['forecast'].iloc[83:92])
rmse = np.sqrt(mse)
mape = mean_absolute_percentage_error(new_df[selected_column].iloc[83:92], new_df['forecast'].iloc[83:92])

#forecast
from pandas.tseries.offsets import DateOffset
future_dates=[new_df.index[-1]+DateOffset(months=x)for x in range(0,24)]
future_datest_df=pd.DataFrame(index=future_dates[1:],columns=new_df.columns)
future_df=pd.concat([new_df,future_datest_df])
model=sm.tsa.statespace.SARIMAX(future_df[selected_column],order=(1,1,3),seasonal_order=(1,1,3,12))
results=model.fit()
b=results.predict(start=100,end=144)
future_df['forecast']=results.predict(start=100,end=144)
print(future_df["forecast"].tail(16))
#plot
import plotly.graph_objects as go

# Assuming future_df is your DataFrame containing 'Fruits' and 'forecast' columns

# Create traces
trace1 = go.Scatter(x=future_df.index, y=future_df[selected_column], mode='lines', name=selected_column)
trace2 = go.Scatter(x=future_df.index, y=future_df['forecast'], mode='lines', name='Forecast')

# Create layout
layout = go.Layout(title=selected_column +'vs. Date',
                   xaxis=dict(title='Date'),
                   yaxis=dict(title='Value'))

# Create figure
fig = go.Figure(data=[trace1, trace2], layout=layout)

# Show interactive plot
fig.show()

